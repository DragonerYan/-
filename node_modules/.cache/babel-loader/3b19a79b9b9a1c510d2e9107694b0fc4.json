{"remainingRequest":"D:\\github007\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\github007\\vue2-element-touzi-admin\\src\\directive\\permission\\permission.js","dependencies":[{"path":"D:\\github007\\vue2-element-touzi-admin\\src\\directive\\permission\\permission.js","mtime":1604132537148},{"path":"D:\\github007\\vue2-element-touzi-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\github007\\vue2-element-touzi-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport store from '@/store';\nexport default {\n  // inserted函数：当被绑定的元素插入到 DOM 中时……\n  inserted: function inserted(el, binding, vnode) {\n    var value = binding.value; // 获取指令绑定的值;\n\n    var roles = store.getters && store.getters.roles; //用户本身的roles信息,arr;\n\n    if (value && value instanceof Array && value.length > 0) {\n      var permissionRoles = value;\n      var hasPermission = roles.some(function (role) {\n        // 只要有一个满足即返回true\n        return permissionRoles.includes(role);\n      }); // 没有该指令,直接删除掉该指令元素;即页面不显示没有指令权限的按钮;\n\n      if (!hasPermission) {\n        el.parentNode && el.parentNode.removeChild(el); // 因项目需要，本指令remove其父元素;一般情况下，只隐藏其本身;\n      }\n    } else {\n      throw new Error(\"need roles! Like v-permission=\\\"['admin','editor']\\\"\");\n    }\n  }\n};",{"version":3,"sources":["D:\\github007\\vue2-element-touzi-admin\\src\\directive\\permission\\permission.js"],"names":["store","inserted","el","binding","vnode","value","roles","getters","Array","length","permissionRoles","hasPermission","some","role","includes","parentNode","removeChild","Error"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,eAAc;AACZ;AACAC,EAAAA,QAFY,oBAEHC,EAFG,EAECC,OAFD,EAEUC,KAFV,EAEiB;AAAA,QACnBC,KADmB,GACTF,OADS,CACnBE,KADmB,EACA;;AAC3B,QAAMC,KAAK,GAAGN,KAAK,CAACO,OAAN,IAAiBP,KAAK,CAACO,OAAN,CAAcD,KAA7C,CAF2B,CAEwB;;AAEnD,QAAID,KAAK,IAAIA,KAAK,YAAYG,KAA1B,IAAmCH,KAAK,CAACI,MAAN,GAAe,CAAtD,EAAyD;AACvD,UAAMC,eAAe,GAAGL,KAAxB;AAEA,UAAMM,aAAa,GAAGL,KAAK,CAACM,IAAN,CAAW,UAAAC,IAAI,EAAI;AAAE;AACzC,eAAOH,eAAe,CAACI,QAAhB,CAAyBD,IAAzB,CAAP;AACD,OAFqB,CAAtB,CAHuD,CAMvD;;AACA,UAAI,CAACF,aAAL,EAAoB;AAClBT,QAAAA,EAAE,CAACa,UAAH,IAAiBb,EAAE,CAACa,UAAH,CAAcC,WAAd,CAA0Bd,EAA1B,CAAjB,CADkB,CAElB;AACD;AACF,KAXD,MAWO;AACL,YAAM,IAAIe,KAAJ,wDAAN;AACD;AACF;AApBW,CAAd","sourcesContent":["\r\nimport store from '@/store'\r\n\r\nexport default{\r\n  // inserted函数：当被绑定的元素插入到 DOM 中时……\r\n  inserted(el, binding, vnode) {\r\n    const { value } = binding  // 获取指令绑定的值;\r\n    const roles = store.getters && store.getters.roles //用户本身的roles信息,arr;\r\n\r\n    if (value && value instanceof Array && value.length > 0) {\r\n      const permissionRoles = value\r\n\r\n      const hasPermission = roles.some(role => { // 只要有一个满足即返回true\r\n        return permissionRoles.includes(role)\r\n      })\r\n      // 没有该指令,直接删除掉该指令元素;即页面不显示没有指令权限的按钮;\r\n      if (!hasPermission) {\r\n        el.parentNode && el.parentNode.removeChild(el)\r\n        // 因项目需要，本指令remove其父元素;一般情况下，只隐藏其本身;\r\n      }\r\n    } else {\r\n      throw new Error(`need roles! Like v-permission=\"['admin','editor']\"`)\r\n    }\r\n  }\r\n}\r\n\r\n"]}]}